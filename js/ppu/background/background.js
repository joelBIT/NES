import { Tile } from "./tile.js";
import { Shifter } from "./shifter.js";

/**
 * Represents the background to be rendered. It consists of shifters and tiles. The PPU outputs a picture region of
 * 256x240 pixels. The picture region is generated by doing memory fetches that fill shift registers, from which a
 * pixel is selected. It is composed of a background region filling the entire screen and smaller sprites that may be
 * placed nearly anywhere on it.
 */
export class Background {
  nextTile = new Tile();
  shifter = new Shifter();

  getTileID() {
    return this.nextTile.getID();
  }

  setTileID(id) {
    this.nextTile.setID(id);
  }

  setTileLSB(lsb) {
    this.nextTile.setLSB(lsb);
  }

  setTileMSB(msb) {
    this.nextTile.setMSB(msb);
  }

  getTileAttribute() {
    return this.nextTile.getAttribute();
  }

  setTileAttribute(attribute) {
    this.nextTile.setAttribute(attribute);
  }

  /**
   * 8 pixels in scanline. Load the current background tile pattern and attributes.
   */
  loadShifter() {
    this.shifter.setPatternLow((this.shifter.getPatternLow() & 0xFF00) | this.nextTile.getLSB());
    this.shifter.setPatternHigh((this.shifter.getPatternHigh() & 0xFF00) | this.nextTile.getMSB());

    this.shifter.setAttributeLow((this.shifter.getAttributeLow() & 0xFF00) | ((this.nextTile.getAttribute() & 0b01) > 0 ? 0xFF : 0x00));
    this.shifter.setAttributeHigh((this.shifter.getAttributeHigh() & 0xFF00) | ((this.nextTile.getAttribute() & 0b10) > 0 ? 0xFF : 0x00));
  }

  shift() {
    this.shifter.shift();
  }

  getPixel(location) {
    return this.shifter.getPixel(location);
  }

  getPalette(location) {
    return this.shifter.getPalette(location);
  }

  reset() {
    this.nextTile.reset();
    this.shifter.reset();
  }
}
